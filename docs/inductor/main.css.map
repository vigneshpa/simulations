{"version":3,"file":"main.css","mappings":"AAckB,m5CCChB,wDAGE,mBADA,eAAgB,CAFT,SAGY,CCLrB,sBAQE,kBAAmB,CALnB,iBAAkB,CAClB,wBAAyB,CACzB,YAAa,CACb,aAAc,CACd,sBAAuB,CAPjB,gBACW,CACjB,iBAAkB,CAOlB,eAAgB,CAIlB,4CACO,WACO,CACd,qBACO,YACS,CC0FhB,mBAGE,2BADA,eAAgB,CAFd,SAGyB","sources":["webpack://simulations/./src/lib/Template.svelte","webpack://simulations/./src/lib/Progress.svelte","webpack://simulations/./src/lib/Info.svelte","webpack://simulations/./src/inductor/App.svelte"],"sourcesContent":["<header><slot name=\"header\">Learning physics visually</slot></header>\n<div class=\"content\">\n  <slot name=\"info\" />\n  <div class=\"responsiveGrid\">\n    <div class=\"sim\"><div id=\"view\"><slot name=\"view\" /></div></div>\n    <div class=\"controls\"><slot name=\"controls\" /></div>\n  </div>\n</div>\n<footer>\n  <slot name=\"footer\">\n    source code is avilable at <a href=\"https://GitHub.com/vigneshpa/simulations\" target=\"_blank\">GitHub.com</a>\n  </slot>\n</footer>\n\n<style lang=\"scss\">\n  :global {\n    :root {\n      --background: white;\n      --color: black;\n      --a-color: rgb(23, 80, 155);\n      --image-filter: none;\n      --shadow: 0px 0px 5px grey;\n    }\n    @media (prefers-color-scheme: dark) {\n      :root {\n        --background: rgb(46, 46, 46);\n        --color: white;\n        --image-filter: invert(80%);\n        --a-color: rgb(125, 181, 255);\n        --shadow: 0px 0px 2px white;\n      }\n    }\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: var(--color);\n      background-color: var(--background);\n      -webkit-tap-highlight-color: transparent;\n      line-height: 28px;\n      line-height: 1.8rem;\n    }\n    a {\n      color: var(--a-color);\n    }\n    label {\n      padding: 0px 3px;\n      display: inline-block;\n      min-width: 100px;\n      text-align: center;\n    }\n  }\n  header {\n    box-shadow: var(--shadow);\n    color: var(--color);\n    background-color: var(--background);\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    padding: 0.5em 0.2em;\n    font-size: 1.2em;\n    z-index: 2;\n  }\n\n  .content {\n    margin: 0;\n    margin-top: 80px;\n    margin-bottom: 80px;\n  }\n\n  .responsiveGrid {\n    margin: 0;\n    padding: 25px;\n\n    display: grid;\n    grid-template-columns: auto auto;\n  }\n  @media only screen and (max-width: 1000px) {\n    .responsiveGrid {\n      grid-template-columns: auto;\n    }\n  }\n\n  .controls {\n    box-shadow: var(--shadow);\n    border-radius: 1em;\n    padding: 1em;\n    margin-top: 30px;\n    z-index: 0;\n  }\n\n  .sim {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n\n  footer {\n    position: fixed;\n    bottom: 0px;\n    left: 0px;\n    right: 0px;\n    padding: 0.3em;\n    box-shadow: var(--shadow);\n    background-color: var(--background);\n    z-index: 1;\n  }\n</style>\n","<script lang=\"ts\">\n  export let value: number;\n  export let min: number = 0;\n  export let max: number;\n  export let name: string;\n  export let unit: string;\n  export let precision: number = 2;\n</script>\n\n<div>\n  <label for={name}>{name} : {value.toFixed(precision)}{unit}</label><br />\n  <progress id={name} type=\"range\" max={max - min} value={value - min} />\n</div>\n\n<style>\n  progress {\n    width: 90%;\n    max-width: 300px;\n    margin-bottom: 20px;\n  }\n</style>\n","<script lang=\"ts\">\n  import { slide } from 'svelte/transition';\n  export let info: string;\n</script>\n\n{#if info}\n  <div transition:slide class=\"holder\">\n    <div class=\"content\">{info}</div>\n    <button class=\"close\" on:click={() => (info = '')}>Close</button>\n  </div>\n{/if}\n\n<style>\n  .holder {\n    margin-left: auto;\n    margin-right: auto;\n    border-radius: 5px;\n    box-shadow: var(--shadow);\n    display: flex;\n    flex-flow: row;\n    justify-content: center;\n    align-items: center;\n    max-width: 800px;\n  }\n  .content {\n    margin: 10px;\n  }\n  .close {\n    margin: 10px;\n  }\n  button {\n    padding: 0.3em;\n  }\n</style>\n","<script lang=\"ts\">\n  import Template from '@lib/Template.svelte';\n  import Range from '@lib/Range.svelte';\n  import Progress from '@lib/Progress.svelte';\n  import Info from '@lib/Info.svelte';\n  import flywheelImg from './flywheel.svg';\n\n  // Maxima\n  const voltageMax = 10;\n  const currentMax = 2;\n  const resistanceMax = 10;\n  const inductanceMax = 0.05;\n  const sineWaveFrequencyMax = 100;\n  const speedMax = 0.05;\n\n  // Controlables\n  let voltage = 0; // in Volts (V)\n  let resistance = 5; // in Ohms (Ω)\n  let inductance = 0.02; // in Henries (H)\n  let sineWaveFrequency = 50; // in Hertz (Hz)\n  let sineWaveAngularVelocity = 0;\n  $: sineWaveAngularVelocity = 2 * Math.PI * sineWaveFrequency; // in rad/sec as ω=2πf\n  let sineWavePhase = 0;\n  let speed = 0.01;\n\n  // Constants\n  const angularVelocityCurrentRatio = 50; // truns per ampere\n  const initialInductorCurrent = () => -(voltageMax / (inductance * sineWaveAngularVelocity)); // as -I₀=-E₀/Lω\n  const integrateResistorCurrent = (delta: number) => voltage / resistance; // as V=iR\n  const integrateInductorCurrent = (delta: number) => current + (delta * voltage) / inductance; // as V=-L(di/dt)\n  const integrateResIndCurrent = (delta: number) => current + (delta * (voltage - current * resistance)) / inductance; // as V=-L(di/dt)+iR\n\n  // Load Type emun\n  const enum LoadType {\n    Resistive,\n    Inductive,\n    InductiveCorrected,\n    ResInd,\n  }\n\n  // Circuit Types\n  const circuitTypeInfo: { text: string; integrator: (delta: number) => number }[] = [\n    { text: 'Pure Resistor', integrator: integrateResistorCurrent },\n    { text: 'Pure Inductor', integrator: integrateInductorCurrent },\n    { text: 'Pure Inductor (initial current corrected)', integrator: integrateInductorCurrent },\n    { text: 'RL Series Circuit', integrator: integrateResIndCurrent },\n  ];\n\n  // Internal variables\n  let current: number = 0; // Curent integral in Ampere (A)\n  let wheelR: number = 0; // Wheel angle in turns\n  let loadtype: LoadType = LoadType.Resistive; // Type of load\n  let generateSine: boolean = false; // weather to generate sine wave\n  let generatorStartTS: number | null = null; // sine wave generator start timestap\n  let previousTS: number = performance.now(); // previous timestamp\n  let info: string = '';\n\n  // integration function variable\n  let integrateCurrent = integrateResistorCurrent;\n\n  const onGenerateSineChange = (checked: boolean) => {\n    generatorStartTS = null;\n    current = 0;\n    generateSine = !!checked;\n    if (generateSine) {\n      sineWavePhase = 0;\n      if (loadtype === LoadType.InductiveCorrected) current = initialInductorCurrent();\n    }\n  };\n  $: onGenerateSineChange(generateSine);\n  const onLoadChange = (loadt: LoadType) => {\n    if (generateSine) onGenerateSineChange(true);\n    integrateCurrent = circuitTypeInfo[loadt].integrator;\n  };\n  $: onLoadChange(loadtype);\n\n  const step: FrameRequestCallback = timeStamp => {\n    const delta = ((timeStamp - previousTS) * speed) / 1000; // calculating delta and converting it to seconds\n    if (timeStamp - previousTS > 500)\n      info = \"It looks like you have left this tab or your browser's preformance is slow and this simulation may be inaccurate!\";\n    if (!generatorStartTS) generatorStartTS = timeStamp;\n    if (generateSine) voltage = voltageMax * Math.sin((sineWavePhase += sineWaveAngularVelocity * delta));\n\n    current = integrateCurrent(delta);\n\n    // changing wheel angle\n    wheelR = (wheelR + angularVelocityCurrentRatio * current * delta) % 1;\n    previousTS = timeStamp;\n    window.requestAnimationFrame(step);\n  };\n  window.requestAnimationFrame(step);\n</script>\n\n<Template>\n  <Info bind:info slot=\"info\" />\n  <span slot=\"header\">Visualising Current as angular velocity</span>\n  <img slot=\"view\" src={flywheelImg} style=\"transform:rotate({wheelR}turn)\" alt=\"\" />\n  <span slot=\"controls\">\n    <Progress name=\"Current\" unit=\"A\" value={current} max={currentMax} min={-currentMax} />\n    <Range name=\"Voltage\" unit=\"V\" bind:value={voltage} min={-voltageMax} max={voltageMax} />\n    <div>\n      <input type=\"checkbox\" bind:checked={generateSine} on:change id=\"generateSine\" /><label for=\"generateSine\">Generate Sine Wave</label>\n      {#if generateSine}\n        <Range name=\"Frequency\" unit=\"Hz\" bind:value={sineWaveFrequency} min={1} max={sineWaveFrequencyMax} />\n      {/if}\n    </div>\n    <h4>Select Circuit Type</h4>\n    <div>\n      {#each circuitTypeInfo as { text }, type}\n        <input type=\"radio\" name=\"circuitType\" id={type + 'ltype'} bind:group={loadtype} value={type} /><label for={type + 'ltype'}>{text}</label>\n        <br />\n      {/each}\n    </div>\n    <h3>Controlables</h3>\n    <Range name=\"Inductance\" unit=\"H\" bind:value={inductance} min={inductanceMax * 0.01} max={inductanceMax} milli precision={1} />\n    <Range name=\"Resistance\" unit=\"Ω\" bind:value={resistance} min={resistanceMax * 0.01} max={resistanceMax} precision={1} />\n    <Range name=\"Speed\" unit=\"x\" bind:value={speed} max={speedMax} precision={4} />\n  </span>\n</Template>\n\n<style>\n  img {\n    width: 80%;\n    max-width: 300px;\n    filter: var(--image-filter);\n  }\n</style>\n"],"names":[],"sourceRoot":""}
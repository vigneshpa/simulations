{"version":3,"file":"assets/main.js","mappings":"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","sources":["webpack://simulations/./src/inductor/index.ts"],"sourcesContent":["import './style.css'; // importing style sheet\n\n// Constants\nconst inductance = 10; // in Henries(H)\nconst resistance = 5; // in Ohms(Ω)\nconst sineWaveFrequency = 0.2; // in Hertz (Hz)\nconst sineWaveAngularVelocity = 2 * Math.PI * sineWaveFrequency; // in rad/sec as ω=2πf\nconst voltageMax = 10;\nconst currentMax = 2;\nconst initialInductorCurrent = -voltageMax / (inductance * sineWaveAngularVelocity); // as -I₀=-E₀/Lω\nconst angularVelocityCurrentRatio = 1;\nconst integrateResistorCurrent = (delta: number) => voltage / resistance; // as V=iR\nconst integrateInductorCurrent = (delta: number) => (currentIntegral += (delta * voltage) / inductance); // as V=-L(di/dt)\nconst integrateResIndCurrent = (delta: number) => (currentIntegral += (delta * (voltage - currentIntegral * resistance)) / inductance); // as V=-L(di/dt)+iR\n\n// Variables\nlet integrateCurrent = integrateResistorCurrent;\nlet voltage = 0;\nlet rps = 0;\nlet wheelR: number = 0;\nlet currentIntegral: number = 0;\nlet loadtype: 'Resistive' | 'Inductive' | 'ResInd' | 'InductiveCorrected' = 'Resistive';\nlet generateSine: boolean = false;\nlet generatorStartTS: number | null = null;\nlet previousTS: number = 0;\n\nconst wheelEl = document.getElementById('flywheel')!;\nconst changeGenerateSine = (checked: boolean) => {\n  generatorStartTS = null;\n  currentIntegral = 0;\n  rps = 0;\n  generateSine = !!checked;\n  if (generateSine && loadtype === 'InductiveCorrected') currentIntegral = initialInductorCurrent;\n};\n\nconst changeCircuitType = (loadt: typeof loadtype) => {\n  currentIntegral = 0;\n  loadtype = loadt;\n  if (generateSine) changeGenerateSine(true);\n  switch (loadt) {\n    case 'Resistive':\n      integrateCurrent = integrateResistorCurrent;\n      break;\n    case 'Inductive':\n      integrateCurrent = integrateInductorCurrent;\n      break;\n    case 'ResInd':\n      integrateCurrent = integrateResIndCurrent;\n      break;\n    case 'InductiveCorrected':\n      integrateCurrent = integrateInductorCurrent;\n      break;\n    default:\n      integrateCurrent = integrateResistorCurrent;\n  }\n};\n\nconst step: FrameRequestCallback = timeStamp => {\n  const delta = (timeStamp - previousTS) / 1000; // calculating delta and converting it to seconds\n\n  const current = integrateCurrent(delta);\n\n  rps = angularVelocityCurrentRatio * current;\n\n  wheelR += rps * delta * 360;\n  if (wheelR > -5000 && wheelR < 5000) wheelR = wheelR % 360;\n  wheelEl.style.transform = `rotate(${wheelR}deg)`;\n\n  // --\n  curEl.innerText = current.toFixed(1);\n  curPgr.value = current + currentMax;\n  if (!generatorStartTS) generatorStartTS = timeStamp;\n  if (generateSine)\n    (<any>volEl).innerText = ((<any>voltageInp).value = voltage =\n      voltageMax * Math.sin(((timeStamp - generatorStartTS) * sineWaveAngularVelocity) / 1000)).toFixed(1);\n  previousTS = timeStamp;\n  window.requestAnimationFrame(step);\n};\nwindow.requestAnimationFrame(step);\n\n// Populating controls\n\n// Shortcut functions\nconst br = () => document.createElement('br');\n\n// getting control element\nconst controls = document.getElementById('controls')!;\n\n// Appending current\nconst curEl = document.createElement('span');\ncurEl.innerText = '0.0';\ncontrols.append('Current : ', curEl, 'A', br());\n\n// Appending current progress\nconst curPgr = document.createElement('progress');\ncurPgr.max = currentMax * 2;\ncurPgr.value = 2;\ncontrols.append(curPgr, br());\n\n// Appending voltage\nconst volEl = document.createElement('span');\nvolEl.innerText = '0.0';\nconst voltageLablel = document.createElement('label');\nvoltageLablel.append('Voltage : ', volEl, 'V');\nvoltageLablel.htmlFor = 'voltage';\ncontrols.append(voltageLablel, br());\n\n// Appending voltage input\nconst voltageInp = document.createElement('input');\nvoltageInp.id = 'voltage';\nvoltageInp.type = 'range';\nvoltageInp.max = voltageMax as unknown as string;\nvoltageInp.min = -voltageMax as unknown as string;\nvoltageInp.step = '0.2';\nvoltageInp.value = '0';\nvoltageInp.oninput = ev => (voltage = +(volEl.innerText = voltageInp.value));\ncontrols.append(voltageInp, br());\n\n// Appending generate sine\nconst generateSineInp = document.createElement('input');\ngenerateSineInp.type = 'checkbox';\ngenerateSineInp.id = 'generateSine';\ngenerateSineInp.onchange = ev => changeGenerateSine(generateSineInp.checked);\nconst generateSineInpLbl = document.createElement('label');\ngenerateSineInpLbl.htmlFor = 'generateSine';\ngenerateSineInpLbl.innerText = `Generate Sine Wave (${sineWaveFrequency}Hz)`;\ncontrols.append(generateSineInp, generateSineInpLbl, br());\n\n// Appending circuit type selector\nconst circuitDiv = document.createElement('div');\nconst circuitDivHeading = document.createElement('h4');\ncircuitDivHeading.innerText = 'Select Circuit Type:';\ncircuitDiv.append(circuitDivHeading);\nconst handlers = {\n  'Pure Resistor': () => changeCircuitType('Resistive'),\n  'Pure Inductor': () => changeCircuitType('Inductive'),\n  'Pure Inductor (initial current corrected)': () => changeCircuitType('InductiveCorrected'),\n  'RL Series Circuit': () => changeCircuitType('ResInd'),\n};\nfor (const text in handlers) {\n  if (Object.prototype.hasOwnProperty.call(handlers, text)) {\n    const inpt = document.createElement('input');\n    inpt.type = 'radio';\n    inpt.name = 'circuitType';\n    if (text === 'Pure Resistor') inpt.checked = true;\n    inpt.id = text;\n    inpt.onchange = (<any>handlers)[text];\n    circuitDiv.append(inpt);\n    const lbl = document.createElement('label');\n    lbl.innerText = text;\n    lbl.htmlFor = text;\n    circuitDiv.append(lbl, br());\n  }\n}\ncontrols.append(circuitDiv);\n\n// Appending circuit constants\nconst constantsDiv = document.createElement('div');\nconst constantsDivHeading = document.createElement('h4');\nconstantsDivHeading.innerText = 'Circuit Constants';\nconstantsDiv.append(constantsDivHeading);\nconstantsDiv.append(`Inductance : ${inductance}H`, br());\nconstantsDiv.append(`Resistance : ${resistance}Ω`, br());\ncontrols.append(constantsDiv);\n"],"names":["sineWaveAngularVelocity","Math","PI","initialInductorCurrent","integrateResistorCurrent","delta","voltage","integrateInductorCurrent","currentIntegral","integrateResIndCurrent","integrateCurrent","rps","wheelR","loadtype","generateSine","generatorStartTS","previousTS","wheelEl","document","getElementById","changeGenerateSine","checked","changeCircuitType","loadt","step","timeStamp","current","style","transform","curEl","innerText","toFixed","curPgr","value","volEl","voltageInp","sin","window","requestAnimationFrame","br","createElement","controls","append","max","currentMax","voltageLablel","htmlFor","id","type","min","oninput","ev","generateSineInp","onchange","generateSineInpLbl","circuitDiv","circuitDivHeading","handlers","text","Object","prototype","hasOwnProperty","call","inpt","name","lbl","constantsDiv","constantsDivHeading"],"sourceRoot":""}
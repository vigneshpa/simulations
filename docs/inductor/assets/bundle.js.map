{"version":3,"file":"assets/bundle.js","mappings":"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","sources":["webpack://simulations/webpack/bootstrap","webpack://simulations/webpack/runtime/publicPath","webpack://simulations/./src/inductor/index.ts"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.p = \"./\";","import './style.css'; // importing style sheet\n\nconst visiblePercision = 1;\n\n// Maximums\nconst voltageMax = 10;\nconst currentMax = 2;\nconst resistanceMax = 10;\nconst inductanceMax = 10;\n\n// Controlables\nconst controls = {\n  Voltage: 0, // in Volts (V)\n  Resistance: 5, // in Ohms (Ω)\n  Inductance: 5, // in Henries (H)\n};\n\n// Constants\nconst sineWaveFrequency = 0.2; // in Hertz (Hz)\nconst sineWaveAngularVelocity = 2 * Math.PI * sineWaveFrequency; // in rad/sec as ω=2πf\nconst initialInductorCurrent = () => -(voltageMax / (controls.Inductance * sineWaveAngularVelocity)); // as -I₀=-E₀/Lω\nconst angularVelocityCurrentRatio = 1;\nconst integrateResistorCurrent = (delta: number) => controls.Voltage / controls.Resistance; // as V=iR\nconst integrateInductorCurrent = (delta: number) => (currentIntegral += (delta * controls.Voltage) / controls.Inductance); // as V=-L(di/dt)\nconst integrateResIndCurrent = (delta: number) =>\n  (currentIntegral += (delta * (controls.Voltage - currentIntegral * controls.Resistance)) / controls.Inductance); // as V=-L(di/dt)+iR\n\n// Load Type emun\nenum LoadType {\n  Resistive,\n  Inductive,\n  InductiveCorrected,\n  ResInd,\n}\n\n// Internal variables\nlet currentIntegral: number = 0; // Curent integral in Ampere (A)\nlet rps = 0; // Angular velocity in rotations per second\nlet wheelR: number = 0; // Wheel angle in turns\nlet loadtype: LoadType = LoadType.Resistive;\nlet generateSine: boolean = false;\nlet generatorStartTS: number | null = null;\nlet previousTS: number = 0;\n\n// integration function variable\nlet integrateCurrent = integrateResistorCurrent;\n\n// Adding wheel element\nconst wheelEl = document.createElement('img');\nwheelEl.id = 'flywheel';\nwheelEl.src = require('./flywheel.svg');\ndocument.getElementById('view')!.append(wheelEl);\n\nconst changeGenerateSine = (checked: boolean) => {\n  generatorStartTS = null;\n  currentIntegral = 0;\n  rps = 0;\n  generateSine = !!checked;\n  if (generateSine && loadtype === LoadType.InductiveCorrected) currentIntegral = initialInductorCurrent();\n};\n\nconst changeCircuitType = (loadt: LoadType) => {\n  loadtype = loadt;\n  if (generateSine) changeGenerateSine(true);\n  switch (loadt) {\n    case LoadType.Resistive:\n      integrateCurrent = integrateResistorCurrent;\n      break;\n    case LoadType.Inductive:\n    case LoadType.InductiveCorrected:\n      integrateCurrent = integrateInductorCurrent;\n      break;\n    case LoadType.ResInd:\n      integrateCurrent = integrateResIndCurrent;\n      break;\n    default:\n      integrateCurrent = integrateResistorCurrent;\n  }\n};\n\nconst step: FrameRequestCallback = timeStamp => {\n  const delta = (timeStamp - previousTS) / 1000; // calculating delta and converting it to seconds\n\n  const current = integrateCurrent(delta);\n\n  rps = angularVelocityCurrentRatio * current;\n\n  wheelR += rps * delta * 360;\n  if (wheelR > -5000 && wheelR < 5000) wheelR = wheelR % 360;\n  wheelEl.style.transform = `rotate(${wheelR}deg)`;\n\n  // --\n  curEl.innerText = current.toFixed(visiblePercision);\n  curPgr.value = current + currentMax;\n  if (!generatorStartTS) generatorStartTS = timeStamp;\n  if (generateSine) voltageControl.change(voltageMax * Math.sin(((timeStamp - generatorStartTS) * sineWaveAngularVelocity) / 1000));\n  previousTS = timeStamp;\n  window.requestAnimationFrame(step);\n};\nwindow.requestAnimationFrame(step);\n\n// Populating controls -----\n\n// Shortcut functions\nconst br = () => document.createElement('br');\n\n// getting control element\nconst controlsDiv = document.getElementById('controls')!;\n\n// Appending current\nconst curEl = document.createElement('span');\ncurEl.innerText = '0.0';\ncontrolsDiv.append('Current : ', curEl, 'A', br());\n\n// Appending current progress\nconst curPgr = document.createElement('progress');\ncurPgr.max = currentMax * 2;\ncurPgr.value = 2;\ncontrolsDiv.append(curPgr, br());\n\n// Appending controls.Voltage\nconst voltageControl = createControl('Voltage', voltageMax, -voltageMax, 'V');\ncontrolsDiv.append(...voltageControl.nodes, br());\n\n// Appending generate sine\nconst generateSineInp = document.createElement('input');\ngenerateSineInp.type = 'checkbox';\ngenerateSineInp.id = 'generateSine';\ngenerateSineInp.onchange = ev => changeGenerateSine(generateSineInp.checked);\nconst generateSineInpLbl = document.createElement('label');\ngenerateSineInpLbl.htmlFor = 'generateSine';\ngenerateSineInpLbl.innerText = `Generate Sine Wave (${sineWaveFrequency}Hz)`;\ncontrolsDiv.append(generateSineInp, generateSineInpLbl, br());\n\n// Appending circuit type selector\nconst circuitDiv = document.createElement('div');\nconst circuitDivHeading = document.createElement('h4');\ncircuitDivHeading.innerText = 'Select Circuit Type:';\ncircuitDiv.append(circuitDivHeading);\nconst handlers = {\n  'Pure Resistor': () => changeCircuitType(LoadType.Resistive),\n  'Pure Inductor': () => changeCircuitType(LoadType.Inductive),\n  'Pure Inductor (initial current corrected)': () => changeCircuitType(LoadType.InductiveCorrected),\n  'RL Series Circuit': () => changeCircuitType(LoadType.ResInd),\n};\nfor (const text in handlers) {\n  if (Object.prototype.hasOwnProperty.call(handlers, text)) {\n    const inpt = document.createElement('input');\n    inpt.type = 'radio';\n    inpt.name = 'circuitType';\n    if (text === 'Pure Resistor') inpt.checked = true;\n    inpt.id = text;\n    inpt.onchange = (<any>handlers)[text];\n    circuitDiv.append(inpt);\n    const lbl = document.createElement('label');\n    lbl.innerText = text;\n    lbl.htmlFor = text;\n    circuitDiv.append(lbl, br());\n  }\n}\ncontrolsDiv.append(circuitDiv);\n\n// Appending circuit components\nconst componentsDiv = document.createElement('div');\nconst constantsDivHeading = document.createElement('h4');\nconstantsDivHeading.innerText = 'Circuit Components';\ncomponentsDiv.append(constantsDivHeading);\n\n// Inductance control\ncomponentsDiv.append(...createControl('Inductance', inductanceMax, 0.1, 'H').nodes);\n\n// I\n\ncomponentsDiv.append(...createControl('Resistance', resistanceMax, 0.1, 'Ω').nodes);\ncontrolsDiv.append(componentsDiv);\n\nfunction createControl(name: keyof typeof controls, max: number, min: number, unitSymbol: string) {\n  const labelEl = document.createElement('label');\n  labelEl.htmlFor = name;\n  const valueEl = document.createElement('span');\n  valueEl.innerText = controls[name] as unknown as string;\n  labelEl.append(name + ' : ', valueEl, unitSymbol);\n  const contorlEL = document.createElement('input');\n  contorlEL.type = 'range';\n  contorlEL.max = max + '';\n  contorlEL.min = min + '';\n  contorlEL.step = '0.1';\n  contorlEL.id = name;\n  const change = (value: number) => (valueEl.innerText = ((<any>contorlEL).value = controls[name] = value).toFixed(visiblePercision));\n  change(controls[name]);\n  contorlEL.oninput = ev => (valueEl.innerText = (controls[name] = +contorlEL.value).toFixed(visiblePercision));\n  return { nodes: [labelEl, br(), contorlEL, br()], change };\n}\n"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","p","controls","Voltage","Resistance","Inductance","sineWaveAngularVelocity","Math","PI","integrateResistorCurrent","delta","integrateInductorCurrent","currentIntegral","integrateResIndCurrent","LoadType","rps","wheelR","loadtype","Resistive","generateSine","generatorStartTS","previousTS","integrateCurrent","wheelEl","document","createElement","id","src","getElementById","append","changeGenerateSine","checked","InductiveCorrected","changeCircuitType","loadt","Inductive","ResInd","step","timeStamp","current","style","transform","curEl","innerText","toFixed","curPgr","value","voltageControl","change","sin","window","requestAnimationFrame","br","controlsDiv","max","currentMax","createControl","nodes","generateSineInp","type","onchange","ev","generateSineInpLbl","htmlFor","circuitDiv","circuitDivHeading","handlers","text","Object","prototype","hasOwnProperty","call","inpt","name","lbl","componentsDiv","constantsDivHeading","min","unitSymbol","labelEl","valueEl","contorlEL","oninput"],"sourceRoot":""}